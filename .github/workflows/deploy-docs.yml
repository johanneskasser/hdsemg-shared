name: ðŸ“¦ Build & Deploy Docs

on:
  push:
    tags:
      - 'v*'  # Triggers only on version tag pushes like v1.0.0
    branches:
      - main
    paths:
      - 'mkdocs.yml'
      - 'docs/**'

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Set package Version
        run: echo "PACKAGE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install mkdocs mkdocs-material  mkdocstrings[python-legacy]>=0.18 mike

      - name: Build with MkDocs
        run: mkdocs build --strict

      - name: Configure Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # ==== Deployment fÃ¼r main (alias â€ždevelopmentâ€œ) ====
      - name: Deploy docs for branch main
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Mike erzeugt einen Ordner â€ždevelopment/â€œ im gh-pages-Branch
          mike deploy development --push --update-aliases

      # ==== Deployment fÃ¼r Tags (z. B. v1.2.0) ====
      - name: Deploy docs for tagged release
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extrahiere z.B. â€žv1.2.0â€œ â†’ â€ž1.2.0â€œ
          VERSION="${GITHUB_REF#refs/tags/v}"
          # Deploye unter dem Ordner â€ž1.2.0/â€œ
          mike deploy "$VERSION" --push
          # Setze diese Version als Default (optional, falls neueste Version immer direkt geÃ¶ffnet werden soll)
          mike set-default "$VERSION" --push
